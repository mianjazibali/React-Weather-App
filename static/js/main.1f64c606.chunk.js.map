{"version":3,"sources":["components/search/input/SearchInput.js","components/search/index.js","action/type.js","action/weather.js","components/weatherCards/emptyCard/EmptyCard.js","components/weatherCards/card/Card.js","components/weatherCards/index.js","components/cityDetail/CityDetail.js","containers/weather/Weather.js","App.js","serviceWorker.js","store/reducers/weather.js","index.js"],"names":["searchInput","props","className","type","placeholder","onChange","event","changeLocation","value","location","onKeyPress","key","searchHandler","preventDefault","search","CHANGE_LOCATION","START_SEARCH","UPDATE_FORECAST","UPDATE_MSG","DO_NOTHING","apiBaseUrl","appId","updateForecast","forecast","actionType","payload","updateMsg","msg","emptyCard","body","isFetching","card","rain_snow","iconUrl","weather","icon","description","_","map","property","join","snow","rain","unit","date","day","src","alt","temp","cloudiness","humidity","windSpeed","weatherCardsList","weatherCards","forecastList","length","startDate","moment","unix","dt","startOf","distinctWeatherForecast","filter","data","shouldAdd","add","index","dateText","format","dayText","parseInt","main","clouds","all","wind","speed","cityDetail","countryIconUrl","country","sunrise","sunset","city","lat","lon","Weather","this","forecastCity","coord","isEmpty","list","cityTimezones","lookupViaCity","name","cityLookup","cityTimeZone","timezone","tz","changeLocationHandler","searchForecastHandler","Component","connect","state","dispatch","target","getState","a","async","capitalizeLocation","startCase","axios","get","forecastId","id","forecasts","updateMsgHandler","App","Boolean","window","hostname","match","initialState","weatherReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f64c606.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchInput.css';\n\nlet searchInput = (props) => {\n    return (  \n        <div className=\"container\">\n            <div className=\"container__item\">\n                <form>\n                    <input type=\"text\"\n                        className=\"form__field\"\n                        placeholder=\"City\"\n                        onChange={event => props.changeLocation(event)}\n                        value={props.location}\n                        onKeyPress={event => {\n                            if (event.key === 'Enter') {\n                                props.searchHandler()\n                                event.preventDefault();\n                            }\n                        }} \n                    />\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default searchInput;","import React from 'react';\nimport SearchInput from './input/SearchInput';\n\nlet search = (props) => {\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row d-flex justify-content-center\">\n                <div className=\"col-xs-12 col-sm-12 col-md-6\">\n                    <SearchInput changeLocation={props.changeLocation} location={props.location} searchHandler={props.searchHandler}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default search;","let type = {\n    CHANGE_LOCATION: 'CHANGE_LOCATION',\n    START_SEARCH: 'START_SEARCH',\n    UPDATE_FORECAST: 'UPDATE_FORECAST',\n    UPDATE_MSG: 'UPDATE_MSG',\n    DO_NOTHING: 'DO_NOTHING'\n}\n\nexport default type;","import actionType from './type';\nimport axios from 'axios';\nimport _ from 'lodash';\nlet apiBaseUrl = 'https://api.openweathermap.org/data/2.5';\nlet appId = 'eede28a7357ee76bf5313985f72dc138';\n\nconst changeLocation = value => {\n    return {\n        type: actionType.CHANGE_LOCATION,\n        payload: {\n            location: value\n        }\n    }\n}\n\nconst startSearch = () => {\n    return {\n        type: actionType.START_SEARCH,\n    }\n}\n\nconst searchForecast = () => {\n    return async (dispatch, getState) => {\n        const {location, forecast} = getState();\n        let capitalizeLocation = _.startCase(location);\n        if(capitalizeLocation === '') {\n            dispatch(updateMsg('Ops! Empty City Name'));\n        } else if (forecast && forecast.city && capitalizeLocation === forecast.city.name ) {\n            return {\n                type: actionType.DO_NOTHING\n            };\n        } else {\n            try{\n                dispatch(startSearch());\n                let {data: {id: forecastId}} = await axios.get(`${apiBaseUrl}/weather?q=${capitalizeLocation}&APPID=${appId}`);\n                let {data: forecasts} = await axios.get(`${apiBaseUrl}/forecast?id=${forecastId}&APPID=${appId}&units=metric`);\n                dispatch(updateForecast(forecasts));\n            } catch(error) {\n                dispatch(updateMsg('Ops! Invalid City Name'));\n            }\n        }\n    };\n}\n\nconst updateForecast = (forecast) => {\n    return {\n        type: actionType.UPDATE_FORECAST,\n        payload: {\n            forecast: forecast\n        }\n    }\n}\n\nconst updateMsg = (msg) => {\n    return {\n        type: actionType.UPDATE_MSG,\n        payload: {\n            msg: msg\n        }\n    }\n}\n\nexport {\n    changeLocation,\n    searchForecast,\n    updateMsg\n}","import React from 'react';\nimport './EmptyCard.css';\n\nlet emptyCard = (props) => {\n    let body = <p>Enter A City Name In The Search Box And Let The Show Begin!</p>;\n    if(props.msg !== '') {\n        body = <p>{props.msg}</p>\n    }\n    if(props.isFetching) {\n        body = <p><i className=\"fa fa-spinner fa-spin loader\" /></p>\n    }\n    return (\n        <div className=\"container-fluid shadow bg-white mt-5 pt-5 pb-4\">\n            <div className=\"row\">\n                <div className=\"col-md-12 msg date\">\n                    {body}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default emptyCard;","import React from 'react';\nimport _ from 'lodash';\nimport './Card.css';\n\nlet card = (props) => {\n  let iconUrl = `http://openweathermap.org/img/wn/${props.weather[0].icon}@2x.png`;\n  let descriptionArray = _.map(props.weather, _.property('description'));\n  let description = descriptionArray.join();\n  let rain_snow;\n  if(!props.snow || props.snow !== '0') {\n    rain_snow = {\n      icon: 'snowflake.svg',\n      value: props.snow,\n      unit: ''\n    };\n  } else {\n    rain_snow = {\n      icon: 'rain.svg',\n      value: props.rain,\n      unit: 'mm'\n    };\n  }\n  return (\n    <div className=\"container-fluid shadow bg-white pt-4 pr-5 pb-5 pl-5 mb-5\">\n      <div className=\"row date\">\n        <div className=\"col\">\n          <span className=\"pull-left\">{props.date}</span>\n        </div>\n        <div className=\"col\">\n          <span className=\"pull-right\">{props.day}</span>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"col p-0\">\n            <div>\n              <img src={iconUrl} alt={props.weather[0].description} />\n            </div>\n          </div>\n          <div className=\"col my-auto\">\n            <div className=\"temp main float-left\">\n              {props.temp}\n            </div>\n            <div className=\"temp float-left\">\n              o\n            </div>\n          </div>\n      </div> \n      <div className=\"row description\">\n        <div className=\"col-md-12\">\n          {description}\n        </div>\n      </div>\n      <br />\n      <div className=\"row mb-2\">\n        <div className=\"col p-0\">\n          <img src=\"clouds.svg\" alt=\"Cloudiness\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.cloudiness} %</span> \n        </div>\n        <div className=\"col p-0\">\n          <img src=\"humidity.svg\" alt=\"Humidity\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.humidity} %</span> \n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col p-0\">\n          <img src=\"windy.svg\" alt=\"Windspeed\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.windSpeed} mt/s</span> \n        </div>\n        <div className=\"col p-0\">\n          <img src={rain_snow.icon} alt=\"Rain/Snow\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {rain_snow.value} {rain_snow.unit}</span> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default card;","import React from 'react';\nimport EmptyCard from './emptyCard/EmptyCard';\nimport Card from './card/Card';\nimport moment from 'moment-timezone';\nimport _ from 'underscore';\n\nlet weatherCardsList = (props) => {\n    let weatherCards;\n    if(props.forecastList.length === 0) {\n        weatherCards = (\n            <div className=\"col-md-6\">\n                <EmptyCard isFetching={props.isFetching} msg={props.msg}/>\n            </div>\n        );\n    }\n    else {\n        let startDate = moment.unix(props.forecastList[0].dt).startOf('day').unix();\n        let distinctWeatherForecast = _.filter(props.forecastList, data => {\n            let shouldAdd = false;\n            if(moment.unix(data.dt).startOf('day').unix() === startDate) {\n                startDate = moment.unix(startDate).add(1, 'days').unix();\n                shouldAdd = true;\n            }\n            return shouldAdd;\n        });\n        let weather = _.map(distinctWeatherForecast, (data, index) => {\n            let dateText = moment.unix(data.dt).format('Do MMMM');\n            let dayText = moment.unix(data.dt).format('dddd');\n            let rain = data.rain ? data.rain['3h'] : '0'; \n            let snow = data.snow ? data.snow['3h'] : '0';\n            return (\n                <div className=\"col-md-3 ml-2\" key={index}>\n                    <Card\n                        date={dateText}\n                        day={dayText}\n                        temp={parseInt(data.main.temp, 10)}\n                        humidity={data.main.humidity}\n                        weather={data.weather} // Array\n                        cloudiness={data.clouds.all}\n                        windSpeed={data.wind.speed}\n                        rain={rain}\n                        snow={snow}\n                    />\n                </div>\n            );\n        });\n        weatherCards = weather\n    }\n    return (\n        <div className=\"row d-flex justify-content-center\">\n            {weatherCards}\n        </div>\n    );\n} \n\nexport default weatherCardsList;","import React from 'react';\nimport './CityDetail.css';\n\nlet cityDetail = (props) => {\n    let countryIconUrl = `https://www.countryflags.io/${props.country}/flat/24.png`\n    let sunrise = props.sunrise || '-';\n    let sunset = props.sunset || '-';\n    return (\n        <div className=\"row justify-content-center mt-5 mb-5\">\n            <div className=\"col-md-2\">\n                <div className=\"row  mb-1\">\n                    <div className=\"col-5\">\n                        <img src={countryIconUrl} alt={props.country} className=\"icon mt-n1\"></img>\n                    </div>\n                    <div className=\"col-7\">\n                        <span className=\"text\">{props.city}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-2\">\n                <div className=\"row  mb-1\">\n                    <div className=\"col-5\">\n                        <img src=\"latitude.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                    </div>\n                    <div className=\"col-7\">\n                        <span>{props.lat}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-2\">\n                <div className=\"row mb-1\">\n                    <div className=\"col-5\">\n                        <img src=\"longitude.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                    </div>\n                    <div className=\"col-7\">\n                        <span>{props.lon}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-2\">\n                <div className=\"row  mb-1\">\n                    <div className=\"col-5\">\n                        <img src=\"sunrise.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                    </div>\n                    <div className=\"col-7\">\n                        <span>{sunrise}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-2\">\n                <div className=\"row\">\n                    <div className=\"col-5\">\n                        <img src=\"sunset.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                    </div>\n                    <div className=\"col-7\">\n                        <span>{sunset}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default cityDetail;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Search from './../../components/search';\nimport {changeLocation, searchForecast, updateMsg} from './../../action/weather';\nimport WeatherCards from './../../components/weatherCards';\nimport CityDetail from './../../components/cityDetail/CityDetail';\nimport cityTimezones from 'city-timezones';\nimport _ from 'underscore';\nimport moment from 'moment';\n\nclass Weather extends Component {\n    render() {\n        let forecast = this.props.forecast;\n        let forecastList = [];\n        let forecastCity = {};\n        let coord = {};\n        let sunset, sunrise, cityDetail;\n        if(!_.isEmpty(forecast)) {\n            forecastList = forecast.list;\n            forecastCity = forecast.city;\n            coord = forecastCity.coord;\n            let [cityLookup] = cityTimezones.lookupViaCity(forecastCity.name);\n            if(cityLookup) {\n                let cityTimeZone = forecastCity.name === 'London' ? 'Europe/London' : cityLookup.timezone;\n                sunrise = moment.unix(forecastCity.sunrise).tz(cityTimeZone).format('hh:mm a');\n                sunset = moment.unix(forecastCity.sunset).tz(cityTimeZone).format('hh:mm a');\n            }\n            cityDetail = <CityDetail city={forecastCity.name} lat={coord.lat} lon={coord.lon} sunrise={sunrise} sunset={sunset} country={forecastCity.country} />;\n        }\n        return (\n            <div>\n                <br />\n                <Search location={this.props.location} changeLocation={this.props.changeLocationHandler} searchHandler={this.props.searchForecastHandler} />\n                {cityDetail}\n                <WeatherCards isFetching={this.props.isFetching} forecastList={forecastList} msg={this.props.msg}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = state => {\n    return {\n        location: state.location,\n        isFetching: state.isFetching,\n        forecast: state.forecast,\n        msg: state.msg\n    };\n}\n\nlet mapDispatchToProps = dispatch => {\n    return {\n        changeLocationHandler: event => dispatch(changeLocation(event.target.value)),\n        searchForecastHandler: () => dispatch(searchForecast()),\n        updateMsgHandler: msg => dispatch(updateMsg(msg))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);","import React from 'react';\nimport './App.css';\nimport Weather from './containers/weather/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actionType from './../../action/type';\n\nlet initialState = {\n    location: '',\n    isFetching: false,\n    forecast: {},\n    msg: ''\n}\n\nlet weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.CHANGE_LOCATION:\n            return {\n                ...state,\n                location: action.payload.location\n            };\n        case actionType.START_SEARCH:\n            return {\n                ...state,\n                forecast: {},\n                isFetching: true\n            };\n        case actionType.UPDATE_FORECAST:\n            return {\n                ...state,\n                forecast: action.payload.forecast,\n                isFetching: false\n            };\n        case actionType.UPDATE_MSG:\n            return {\n                ...state,\n                msg: action.payload.msg,\n                forecast: {},\n                isFetching: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport weatherReducer from './store/reducers/weather';\n\nlet store = createStore(weatherReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}