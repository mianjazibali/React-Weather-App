{"version":3,"sources":["components/search/input/SearchInput.js","components/search/index.js","action/type.js","action/weather.js","components/weatherCards/emptyCard/EmptyCard.js","components/weatherCards/card/Card.js","components/weatherCards/index.js","components/cityDetail/CityDetail.js","containers/weather/Weather.js","App.js","serviceWorker.js","store/reducers/weather.js","index.js"],"names":["searchInput","props","className","type","placeholder","onChange","event","changeLocation","value","location","onKeyPress","key","searchHandler","preventDefault","onClick","search","CHANGE_LOCATION","START_SEARCH","UPDATE_FORECAST","UPDATE_MSG","DO_NOTHING","apiBaseUrl","appId","updateForecast","forecast","actionType","payload","updateMsg","msg","emptyCard","body","isFetching","card","iconUrl","weather","icon","description","_","map","property","join","date","day","src","alt","temp","temp_min","temp_max","cloudiness","humidity","windSpeed","rain","weatherCardsList","weatherCards","forecastList","length","startDate","moment","unix","dt","startOf","distinctWeatherForecast","filter","data","shouldAdd","add","index","startOfDay","todayForecastArray","min","main","max","forEach","dateText","format","dayText","parseInt","clouds","all","wind","speed","cityDetail","countryIconUrl","country","city","lat","lon","sunrise","sunset","Weather","this","forecastCity","coord","isEmpty","list","cityTimezones","lookupViaCity","name","cityLookup","tz","timezone","changeLocationHandler","searchForecastHandler","Component","connect","state","dispatch","target","getState","a","async","capitalizeLocation","startCase","axios","get","forecastId","id","forecasts","App","Boolean","window","hostname","match","initialState","weatherReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61ead6b6.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchInput.css';\n\nlet searchInput = (props) => {\n    return (  \n        <div className=\"container\">\n            <div className=\"container__item\">\n                <form className=\"\">\n                    <input type=\"text\"\n                        className=\"form__field\"\n                        placeholder=\"City\"\n                        onChange={event => props.changeLocation(event)}\n                        value={props.location}\n                        onKeyPress={event => {\n                            if (event.key === 'Enter') {\n                                props.searchHandler()\n                                event.preventDefault();\n                            }\n                        }} \n                    />\n                    <button type=\"button\" className=\"btn btn--primary btn--inside uppercase\" onClick={props.searchHandler}>Search</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default searchInput;","import React from 'react';\nimport SearchInput from './input/SearchInput';\n\nlet search = (props) => {\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row d-flex justify-content-center\">\n                <div className=\"col-md-4\">\n                    <SearchInput changeLocation={props.changeLocation} location={props.location} searchHandler={props.searchHandler}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default search;","let type = {\n    CHANGE_LOCATION: 'CHANGE_LOCATION',\n    START_SEARCH: 'START_SEARCH',\n    UPDATE_FORECAST: 'UPDATE_FORECAST',\n    UPDATE_MSG: 'UPDATE_MSG',\n    DO_NOTHING: 'DO_NOTHING'\n}\n\nexport default type;","import actionType from './type';\nimport axios from 'axios';\nimport _ from 'lodash';\nlet apiBaseUrl = 'https://api.openweathermap.org/data/2.5';\nlet appId = 'eede28a7357ee76bf5313985f72dc138';\n\nconst changeLocation = value => {\n    return {\n        type: actionType.CHANGE_LOCATION,\n        payload: {\n            location: value\n        }\n    }\n}\n\nconst startSearch = () => {\n    return {\n        type: actionType.START_SEARCH,\n    }\n}\n\nconst searchForecast = () => {\n    return async (dispatch, getState) => {\n        const {location, forecast} = getState();\n        let capitalizeLocation = _.startCase(location);\n        if(capitalizeLocation === '') {\n            dispatch(updateMsg('Ops! Empty City Name'));\n        } else if (forecast && forecast.city && capitalizeLocation === forecast.city.name ) {\n            return {\n                type: actionType.DO_NOTHING\n            };\n        } else {\n            try{\n                dispatch(startSearch());\n                let {data: {id: forecastId}} = await axios.get(`${apiBaseUrl}/weather?q=${capitalizeLocation}&APPID=${appId}`);\n                let {data: forecasts} = await axios.get(`${apiBaseUrl}/forecast?id=${forecastId}&APPID=${appId}&units=metric`);\n                dispatch(updateForecast(forecasts));\n            } catch(error) {\n                dispatch(updateMsg('Ops! Invalid City Name'));\n            }\n        }\n    };\n}\n\nconst updateForecast = (forecast) => {\n    return {\n        type: actionType.UPDATE_FORECAST,\n        payload: {\n            forecast: forecast\n        }\n    }\n}\n\nconst updateMsg = (msg) => {\n    return {\n        type: actionType.UPDATE_MSG,\n        payload: {\n            msg: msg\n        }\n    }\n}\n\nexport {\n    changeLocation,\n    searchForecast,\n    updateMsg\n}","import React from 'react';\nimport './EmptyCard.css';\n\nlet emptyCard = (props) => {\n    let body = <p>Enter A City Name In The Search Box And Let The Show Begin!</p>;\n    if(props.msg !== '') {\n        body = <p>{props.msg}</p>\n    }\n    if(props.isFetching) {\n        body = <p><i className=\"fa fa-spinner fa-spin loader\" /></p>\n    }\n    return (\n        <div className=\"container-fluid shadow bg-white mt-5 pt-5 pb-4\">\n            <div className=\"row\">\n                <div className=\"col-md-12 msg date\">\n                    {body}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default emptyCard;","import React from 'react';\nimport _ from 'lodash';\nimport './Card.css';\n\nlet card = (props) => {\n  let iconUrl = `http://openweathermap.org/img/wn/${props.weather[0].icon}@2x.png`;\n  let descriptionArray = _.map(props.weather, _.property('description'));\n  let description = descriptionArray.join();\n  return (  \n    <div className=\"container-fluid shadow bg-white pt-4 pr-5 pb-5 pl-5 mt-5\">\n      <div className=\"row date\">\n        <div className=\"col-md-6\">\n          <span className=\"pull-left\">{props.date}</span>\n        </div>\n        <div className=\"col-md-6\">\n          <span className=\"pull-right\">{props.day}</span>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"col-md-6 p-0\">\n            <div>\n              <img src={iconUrl} alt={props.weather[0].description} />\n            </div>\n          </div>\n          <div className=\"col-md-6 my-auto\">\n            <div className=\"temp main float-left\">\n              {props.temp}\n            </div>\n            <div className=\"temp float-left\">\n              o\n            </div>\n            <div className=\"temp min float-right mr-5\">\n              Min: {props.temp_min} &nbsp;\n            </div>\n            <div className=\"temp max float-right mr-5\">\n              Max: {props.temp_max} &nbsp;\n            </div>\n          </div>\n      </div> \n      <div className=\"row description\">\n        <div className=\"col-md-12\">\n          {description}\n        </div>\n      </div>\n      <br />\n      <div className=\"row mb-2\">\n        <div className=\"col-md-6 p-0\">\n          <img src=\"clouds.svg\" alt=\"Humidity\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.cloudiness} %</span> \n        </div>\n        <div className=\"col-md-6 p-0\">\n          <img src=\"humidity.svg\" alt=\"Humidity\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.humidity} %</span> \n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-6 p-0\">\n          <img src=\"windy.svg\" alt=\"Humidity\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.windSpeed} mt/s</span> \n        </div>\n        <div className=\"col-md-6 p-0\">\n          <img src=\"rain.svg\" alt=\"Humidity\" className=\"icon float-left\" />\n          <span className=\"float-left measurement\">&nbsp; {props.rain} mm</span> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default card;","import React from 'react';\nimport EmptyCard from './emptyCard/EmptyCard';\nimport Card from './card/Card';\nimport moment from 'moment-timezone';\nimport _ from 'underscore';\n\nlet weatherCardsList = (props) => {\n    let weatherCards;\n    if(props.forecastList.length === 0) {\n        weatherCards = (\n            <div className=\"col-md-6\">\n                <EmptyCard isFetching={props.isFetching} msg={props.msg}/>\n            </div>\n        );\n    }\n    else {\n        let startDate = moment.unix(props.forecastList[0].dt).startOf('day').unix();\n        let distinctWeatherForecast = _.filter(props.forecastList, data => {\n            let shouldAdd = false;\n            if(moment.unix(data.dt).startOf('day').unix() === startDate) {\n                startDate = moment.unix(startDate).add(1, 'days').unix();\n                shouldAdd = true;\n            }\n            return shouldAdd;\n        });\n        let weather = _.map(distinctWeatherForecast, (data, index) => {\n            let startOfDay = moment.unix(data.dt).startOf('day').unix();\n            let todayForecastArray = _.filter(props.forecastList, forecast => {\n                return moment.unix(forecast.dt).startOf('day').unix() === startOfDay;\n            });\n            let min = todayForecastArray[0].main.temp_min;\n            let max = todayForecastArray[0].main.temp_max;\n            _.forEach(todayForecastArray, forecast => {\n                if(forecast.main.temp_min < min) {\n                    min = forecast.main.temp_min;\n                }\n                if(forecast.main.temp.max > max) {\n                    max = forecast.main.temp.max;\n                }\n            });\n            let dateText = moment.unix(data.dt).format('Do MMMM');\n            let dayText = moment.unix(data.dt).format('dddd');\n            return (\n                <div className=\"col-md-3 ml-2\" key={index}>\n                    <Card\n                        date={dateText}\n                        day={dayText}\n                        temp={parseInt(data.main.temp, 10)}\n                        temp_min={parseInt(min, 10)}\n                        temp_max={parseInt(max, 10)}\n                        humidity={data.main.humidity}\n                        weather={data.weather} // Array\n                        cloudiness={data.clouds.all}\n                        windSpeed={data.wind.speed}\n                        rain='12'\n                    />\n                </div>\n            );\n        });\n        weatherCards = weather\n    }\n    return (\n        <div className=\"row d-flex justify-content-center\">\n            {weatherCards}\n        </div>\n    );\n} \n\nexport default weatherCardsList;","import React from 'react';\nimport './CityDetail.css';\n\nlet cityDetail = (props) => {\n    let countryIconUrl = `https://www.countryflags.io/${props.country}/flat/24.png`\n    return (\n        <div className=\"row d-flex justify-content-center mt-5\">\n            <div className=\"col-md-1\">\n                <img src={countryIconUrl} alt={props.country} className=\"mt-n1\"></img>\n                &nbsp;\n                <span>{props.city}</span>\n            </div>\n            <div className=\"col-md-1\">\n                <img src=\"latitude.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                &nbsp;\n                {props.lat}\n            </div>\n            <div className=\"col-md-1\">\n                <img src=\"longitude.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                &nbsp;\n                {props.lon}\n            </div>\n            <div className=\"col-md-1\">\n                <img src=\"sunrise.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                &nbsp;\n                {props.sunrise}\n            </div>\n            <div className=\"col-md-1\">\n                <img src=\"sunset.svg\" alt=\"Humidity\" className=\"icon mt-n1\" />\n                &nbsp;\n                {props.sunset}\n            </div>\n        </div>\n    );\n}\n\nexport default cityDetail;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Search from './../../components/search';\nimport {changeLocation, searchForecast} from './../../action/weather';\nimport WeatherCards from './../../components/weatherCards';\nimport CityDetail from './../../components/cityDetail/CityDetail';\nimport cityTimezones from 'city-timezones';\nimport _ from 'underscore';\nimport moment from 'moment';\n\nclass Weather extends Component {\n    render() {\n        let forecast = this.props.forecast;\n        let forecastList = [];\n        let forecastCity = {};\n        let coord = {};\n        let sunset,sunrise, cityDetail;\n        if(!_.isEmpty(forecast)) {\n            forecastList = forecast.list;\n            forecastCity = forecast.city;\n            coord = forecastCity.coord;\n            let [cityLookup] = cityTimezones.lookupViaCity(forecastCity.name);\n            sunrise = moment.unix(forecastCity.sunrise).tz(cityLookup.timezone).format('h:mm:ss a');\n            sunset = moment.unix(forecastCity.sunset).tz(cityLookup.timezone).format('h:mm:ss a');\n            cityDetail = <CityDetail city={forecastCity.name} lat={coord.lat} lon={coord.lon} sunrise={sunrise} sunset={sunset} country={forecastCity.country} />;\n        }\n        return (\n            <div>\n                <br />\n                <Search location={this.props.location} changeLocation={this.props.changeLocationHandler} searchHandler={this.props.searchForecastHandler} />\n                {cityDetail}\n                <WeatherCards isFetching={this.props.isFetching} forecastList={forecastList} msg={this.props.msg}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = state => {\n    return {\n        location: state.location,\n        isFetching: state.isFetching,\n        forecast: state.forecast,\n        msg: state.msg\n    };\n}\n\nlet mapDispatchToProps = dispatch => {\n    return {\n        changeLocationHandler: event => dispatch(changeLocation(event.target.value)),\n        searchForecastHandler: () => dispatch(searchForecast())\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);","import React from 'react';\nimport './App.css';\nimport Weather from './containers/weather/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actionType from './../../action/type';\n\nlet initialState = {\n    location: '',\n    isFetching: false,\n    forecast: {},\n    msg: ''\n}\n\nlet weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.CHANGE_LOCATION:\n            return {\n                ...state,\n                location: action.payload.location\n            };\n        case actionType.START_SEARCH:\n            return {\n                ...state,\n                forecast: {},\n                isFetching: true\n            };\n        case actionType.UPDATE_FORECAST:\n            return {\n                ...state,\n                forecast: action.payload.forecast,\n                isFetching: false\n            };\n        case actionType.UPDATE_MSG:\n            return {\n                ...state,\n                msg: action.payload.msg,\n                forecast: {},\n                isFetching: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport weatherReducer from './store/reducers/weather';\n\nlet store = createStore(weatherReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}